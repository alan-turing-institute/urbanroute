     1	"""Perform A* on the graph"""
     2	from typing import Tuple
     3	from graph_tool.all import (
     4	    AStarVisitor,
     5	    astar_search,
     6	    StopSearch,
     7	    Graph,
     8	    EdgePropertyMap,
     9	)
    10	import numpy as np
    11	
    12	
    13	class RouteVisitor(AStarVisitor):
    14	    """Custom functions for our A* implementation"""
    15	
    16	    def __init__(self, target: int):
    17	        self.target = target
    18	        self.count = 0
    19	
    20	    def edge_relaxed(self, e: Tuple[int, int]):
    21	        # stop if the target vertex has been reached
    22	        if e.target() == self.target:
    23	            # logger.log("Stopped after examining %s vertices", self.count)
    24	            raise StopSearch()
    25	
    26	
    27	def astar(
    28	    G: Graph,
    29	    source: int,
    30	    target: int,
    31	    edge_attribute: EdgePropertyMap,
    32	    heuristic,
    33	    pos: np.ndarray,
    34	) -> np.ndarray:
    35	    """
    36	    Perform A* with given heuristic
    37	    Args:
    38	        G: graph
    39	        source: start vertex
    40	        target: end vertex (search terminates here)
    41	        edge_attribute: the edge attribute that defines the cost of an edge
    42	        heuristic: a function that underestimates the distance from any vertex to the target
    43	        pos: positional attribute for vertices
    44	    Returns: a list of vertices from the source to the target
    45	    """
    46	    # run A*
    47	    pred = astar_search(
    48	        G,
    49	        weight=edge_attribute,
    50	        source=source,
    51	        visitor=RouteVisitor(target),
    52	        heuristic=lambda v: heuristic(v, target, pos),
    53	    )[1]
    54	
    55	    # backtrack through the graph to the source
    56	    route = []
    57	    v = target
    58	    while v != source:
    59	        if v == pred[v]:
    60	            raise Exception("The start is not connected to the target")
    61	        route.append(v)
    62	        v = G.vertex(pred[v])
    63	    route.append(v)
    64	    return route
     1	"""Perform A* on the graph"""
     2	from typing import Tuple
     3	from graph_tool.all import (
     4	    AStarVisitor,
     5	    astar_search,
     6	    StopSearch,
     7	    Graph,
     8	    EdgePropertyMap,
     9	)
    10	import numpy as np
    11	
    12	
    13	class RouteVisitor(AStarVisitor):
    14	    """Custom functions for our A* implementation"""
    15	
    16	    def __init__(self, target: int):
    17	        self.target = target
    18	        self.count = 0
    19	
    20	    def edge_relaxed(self, e: Tuple[int, int]):
    21	        # stop if the target vertex has been reached
    22	        if e.target() == self.target:
    23	            # logger.log("Stopped after examining %s vertices", self.count)
    24	            raise StopSearch()
    25	
    26	
    27	def astar(
    28	    G: Graph,
    29	    source: int,
    30	    target: int,
    31	    edge_attribute: EdgePropertyMap,
    32	    heuristic,
    33	    pos: np.ndarray,
    34	) -> np.ndarray:
    35	    """
    36	    Perform A* with given heuristic
    37	    Args:
    38	        G: graph
    39	        source: start vertex
    40	        target: end vertex (search terminates here)
    41	        edge_attribute: the edge attribute that defines the cost of an edge
    42	        heuristic: a function that underestimates the distance from any vertex to the target
    43	        pos: positional attribute for vertices
    44	    Returns: a list of vertices from the source to the target
    45	    """
    46	    # run A*
    47	    pred = astar_search(
    48	        G,
    49	        weight=edge_attribute,
    50	        source=source,
    51	        visitor=RouteVisitor(target),
    52	        heuristic=lambda v: heuristic(v, target, pos),
    53	    )[1]
    54	
    55	    # backtrack through the graph to the source
    56	    route = []
    57	    v = target
    58	    while v != source:
    59	        if v == pred[v]:
    60	            raise Exception("The start is not connected to the target")
    61	        route.append(v)
    62	        v = G.vertex(pred[v])
    63	    route.append(v)
    64	    return route
